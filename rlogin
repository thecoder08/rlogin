#!/usr/bin/env node
var net = require('net');
var fs = require('fs');
var cp = require('child_process');
var mode = 'username';
process.stdout.write('Username: ');
var username = '';
var password = '';
var usernumber = 0;
process.stdin.on('data', function(data) {
    if (mode == 'username') {
        username = data.toString().split('\n')[0];
        if (username) {
            mode = 'password';
            process.stdout.write("Password: ");
            process.stdin.setRawMode(true);
        }
        else {
            process.stdout.write('Username: ');
        }
    }
    else if (mode == 'password') {
        var char = data.toString();
        //process.stdout.write(char.charCodeAt(0).toString());
        if (char == '\r' || char == '\n') {
            process.stdin.setRawMode(false);
            process.stdout.write('\n');
            if (password) {
                var parts = username.split('@');
                if (parts.length == 1) {
                    parts[1] = 'localhost';
                }
                if (parts.length == 2) {
                    var socket = net.connect(12345, parts[1], function() {
                        socket.write(JSON.stringify({username: parts[0], password: password}));
                    });
                    socket.on('data', function(data) {
                        var response = JSON.parse(data);
                        if (response.status == 'correct') {
                            // user is authenticated
                            var programEnv = process.env;
                            programEnv.SHELL = response.shell;
                            programEnv.HOME = response.homedir;
                            programEnv.USER = response.username;
                            var program = cp.spawn(response.shell, [], {env: programEnv, cwd: response.homedir, stdio: 'inherit', argv0: '-' + response.shell.split('/')[response.shell.split('/').length - 1], uid: parseInt(response.userId), gid: parseInt(response.groupId)});
                            process.stdin.pause();
                            program.on('error', function() {
                                process.exit(1);
                            });
                            program.on('exit', function() {
                                process.exit();
                            });
                        }
                        if (response.status == 'incorrect') {
                            console.log('Incorrect password!');
                            process.exit();
                        }
                        if (response.status == 'error') {
                            console.log('Error authenticating!');
                            process.exit();
                        }
                    });
                    socket.on('error', function(err) {
                        console.log('Error connecting to auth server:', err);
                        process.exit(1);
                    });
                }
                else {
                    console.log('Improperly formatted username!');
                    process.exit(1);
                }
            }
            else {
                process.stdin.setRawMode(true);
                process.stdout.write('Password: ');
            }
        }
        else if (char == '\b' || char == '\x7f') {
            if (password.length > 0) {
                password = password.slice(0, -1);
                process.stdout.write('\b \b');
            }
        }
        else {
            password += char;
            process.stdout.write('*');
        }
    }
});
