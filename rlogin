#!/usr/bin/node
var net = require('net');
var fs = require('fs');
var cp = require('child_process');
var crypto = require('crypto');
var mode = 'username';
process.stdout.write('Username: ');
var username = '';
var password = '';
var usernumber = 0;
process.stdin.on('data', function(data) {
    if (mode == 'username') {
        username = data.toString().split('\n')[0];
        if (username) {
            fs.readFile('/etc/users.json', function(err, data) {
                if (err) {
                    console.log('Failed to read user database!');
                    process.exit(1);
                }
                else {
                    var users = JSON.parse(data);
                    var found = false;
                    for (var i = 0; i < users.length; i++) {
                        if (users[i].username == username) {
                            found = true;
                            usernumber = i;
                            break;
                        }
                    }
                    if (found) {
                        mode = 'password';
                        process.stdout.write("Password: ");
                        process.stdin.setRawMode(true);
                    }
                    else {
                        console.log('User does not exist!');
                        setTimeout(function() {
                            process.exit(1);
                        }, 2000);
                    }
                }
            });
        }
        else {
            process.stdout.write('Username: ');
        }
    }
    if (mode == 'password') {
        var char = data.toString();
        if (char == '\r') {
            process.stdin.setRawMode(false);
            process.stdout.write('\n');
            if (password) {
                fs.readFile('/etc/users.json', function(err, data) {
                    if (err) {
                        console.log('Failed to read user database!');
                        process.exit(1);
                    }
                    else {
                        var users = JSON.parse(data);
                        var hash = crypto.createHash('sha256');
                        hash.update(password + users[usernumber].salt);
                        if (hash.digest().equals(Buffer.from(users[usernumber].password, 'hex'))) {
                            // finally, the user is authenticated.
                            var programEnv = process.env;
                            programEnv.SHELL = users[usernumber].shell;
                            programEnv.HOME = users[usernumber].home;
                            programEnv.USER = users[usernumber].username;
                            var program = cp.spawn(users[usernumber].shell, [], {env: programEnv, cwd: users[usernumber].home, stdio: 'inherit', argv0: '-' + users[usernumber].shell, uid: users[usernumber].uid, gid: users[usernumber].gid});
                            process.stdin.pause();
                            program.on('error', function() {
                                process.exit(1);
                            });
                            program.on('exit', function() {
                                process.exit();
                            });
                        }
                        else {
                            console.log('Incorrect Password!');
                            setTimeout(function() {
                                process.exit(1);
                            }, 2000);
                        }
                    }
                });
            }
            else {
                process.stdin.setRawMode(true);
                process.stdout.write('Password: ');
            }
        }
        else if (char == '\b') {
            password.pop();
            process.stdout.write('\b');
        }
        else {
            password += char;
            process.stdout.write('*');
        }
    }
});
